{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';import{toast}from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000/api/v1';export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[token,setToken]=useState(localStorage.getItem('access_token'));// Set up axios interceptor for authentication\nuseEffect(()=>{const interceptor=axios.interceptors.request.use(config=>{if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle token expiration\nconst responseInterceptor=axios.interceptors.response.use(response=>response,async error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&token){// Token expired, try to refresh\nconst refreshToken=localStorage.getItem('refresh_token');if(refreshToken){try{const response=await axios.post(`${API_BASE_URL}/auth/refresh`,{refresh_token:refreshToken});const newToken=response.data.access_token;setToken(newToken);localStorage.setItem('access_token',newToken);// Retry the original request\nerror.config.headers.Authorization=`Bearer ${newToken}`;return axios.request(error.config);}catch(refreshError){// Refresh failed, logout user\nlogout();}}else{logout();}}return Promise.reject(error);});return()=>{axios.interceptors.request.eject(interceptor);axios.interceptors.response.eject(responseInterceptor);};},[token]);// Check if user is authenticated on app load\nuseEffect(()=>{const checkAuth=async()=>{if(token){try{const response=await axios.get(`${API_BASE_URL}/users/me`);setUser(response.data);}catch(error){// Token is invalid, remove it\nlocalStorage.removeItem('access_token');localStorage.removeItem('refresh_token');setToken(null);}}setLoading(false);};checkAuth();},[token]);const login=async(email,password)=>{try{const formData=new FormData();formData.append('username',email);formData.append('password',password);const response=await axios.post(`${API_BASE_URL}/auth/jwt/login`,formData,{headers:{'Content-Type':'application/x-www-form-urlencoded'}});const{access_token,token_type}=response.data;// Get user data after successful login\nconst userResponse=await axios.get(`${API_BASE_URL}/users/me`,{headers:{'Authorization':`Bearer ${access_token}`}});setUser(userResponse.data);setToken(access_token);localStorage.setItem('access_token',access_token);// Note: FastAPI Users JWT endpoint doesn't provide refresh token by default\ntoast.success('Login successful!');return{success:true};}catch(error){var _error$response2,_error$response2$data;const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||'Login failed';toast.error(message);return{success:false,error:message};}};const register=async userData=>{try{const response=await axios.post(`${API_BASE_URL}/auth/register`,userData);toast.success('Registration successful! Please check your email to verify your account.');return{success:true,data:response.data};}catch(error){var _error$response3,_error$response3$data;const message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.detail)||'Registration failed';toast.error(message);return{success:false,error:message};}};const logout=()=>{setUser(null);setToken(null);localStorage.removeItem('access_token');localStorage.removeItem('refresh_token');toast.success('Logged out successfully');};const forgotPassword=async email=>{try{await axios.post(`${API_BASE_URL}/auth/forgot-password`,{email});toast.success('Password reset email sent!');return{success:true};}catch(error){var _error$response4,_error$response4$data;const message=((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.detail)||'Failed to send reset email';toast.error(message);return{success:false,error:message};}};const resetPassword=async(token,password)=>{try{await axios.post(`${API_BASE_URL}/auth/reset-password`,{token,password});toast.success('Password reset successful!');return{success:true};}catch(error){var _error$response5,_error$response5$data;const message=((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.detail)||'Password reset failed';toast.error(message);return{success:false,error:message};}};const updateProfile=async profileData=>{try{const response=await axios.patch(`${API_BASE_URL}/users/me`,profileData);setUser(response.data);toast.success('Profile updated successfully!');return{success:true,data:response.data};}catch(error){var _error$response6,_error$response6$data;const message=((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.detail)||'Profile update failed';toast.error(message);return{success:false,error:message};}};const value={user,loading,isAuthenticated:!!user,login,register,logout,forgotPassword,resetPassword,updateProfile};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthContext;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}